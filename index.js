import { Pool } from "pg";
import {
  syncSupercookIngredients,
  getIngredientsByLanguage,
} from "./ingridients.js";
import { syncSupercookRecipes } from "./recipe_parser.js";
import * as schema from "./schema.js";
import { drizzle } from "drizzle-orm/node-postgres";
import dotenv from "dotenv";

dotenv.config();

const POSTGRES_URI = process.env.POSTGRES_URI;
if (!POSTGRES_URI) {
  console.error("‚ùå POSTGRES_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
  process.exit(1);
}
const locales = process.env.LOCALES.split(",");
const pool = new Pool({ connectionString: POSTGRES_URI });
const db = drizzle(pool, { schema });

async function main() {
  try {
    for (const locale of locales) {
      await syncSupercookIngredients(locale);
      const ingredients = await getIngredientsByLanguage(locale);
      console.log("üì• Ingredients for locale:", locale, ingredients.length);

      for (const ingredient of ingredients) {
        console.log(
          `üåç Syncing ingredient "${ingredient}" for locale: ${locale}`
        );
        await syncSupercookRecipes([ingredient], locale, 30);
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è ${ingredient} –∑–∞–≤–µ—Ä—à—ë–Ω:`, locale);
      }
      console.log("‚úÖ –ò–º–ø–æ—Ä—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –ª–æ–∫–∞–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω:", locale);
    }

    console.log("üéâ –í—Å–µ –ª–æ–∫–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:", error);
  } finally {
    await pool.end();
  }
}

main();
